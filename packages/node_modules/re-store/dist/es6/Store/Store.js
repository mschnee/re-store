"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
const redux_1 = require("redux");
function isNode() {
    return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
}
class Store {
    constructor(options) {
        this.reducerObjects = {};
        this.reduce = (previousState, action) => {
            return Object.keys(this.reducerObjects).reduce((nextState, key) => {
                return nextState.updateIn([key], (v) => this.reducerObjects[key].reduce(v, action));
            }, previousState || immutable_1.Map());
        };
        // oop
        this.reduxStore = options && options.redux
            || this.createStore(options && options.preloadState);
        this.isNode = options && options.isNode !== undefined
            ? options.isNode
            : isNode();
        this.isDev = options && options.isDev !== undefined
            ? options.isDev
            : process && process.env && process.env.NODE_ENV === 'development';
        this.useRemoteDevtools = options && !!options.useRemoteDevtools;
    }
    registerReducer(reducerClass) {
        const nReducer = new reducerClass(this);
        if (!this.reducerObjects.hasOwnProperty(nReducer.name)) {
            this.reducerObjects[nReducer.name] = nReducer;
        }
    }
    getState(name) {
        if (name) {
            return this.reduxStore.getState().get(name);
        }
        else {
            return this.reduxStore.getState();
        }
    }
    dispatch(type, payload) {
        this.reduxStore.dispatch({
            payload,
            type,
        });
    }
    createStore(preloadState) {
        try {
            const rde = require('redux-devtools-extension');
            const rrd = require('remote-redux-devtools');
            if (this.isDev && !this.isNode) {
                const devTools = this.useRemoteDevtools ? rrd.devToolsEnhancer : rde.devToolsEnhancer;
                return redux_1.createStore(this.reduce, preloadState, devTools({}));
            }
            else {
                return redux_1.createStore(this.reduce, preloadState);
            }
        }
        catch (e) {
            return redux_1.createStore(this.reduce, preloadState);
        }
    }
}
exports.default = Store;
//# sourceMappingURL=Store.js.map