import { Iterable } from 'immutable';
export default class Reducer {
    constructor(name, store, defaultState) {
        this.reducerMethods = {};
        this.reduce = (previousState, action) => {
            const nextState = previousState || this.defaultState;
            if (!this.reducerMethods.hasOwnProperty(action.type)) {
                return nextState;
            }
            else {
                return this.reducerMethods[action.type](nextState, action.payload);
            }
        };
        Object.defineProperty(this, 'name', {
            value: name,
            writable: false,
        });
        this.store = store;
        this.defaultState = defaultState || Iterable({}); // todo: this might be bad :/
    }
    register(key, fn) {
        this.reducerMethods[key] = fn;
    }
}
//# sourceMappingURL=Reducer.js.map