import { Map } from 'immutable';

import { Action, MapState, IStore, IReducer } from '@re-store/types';

export class Reducer<StateType, ST = MapState<StateType>> implements IReducer<StateType, ST> {
    public name: string;
    protected store: IStore;
    protected defaultState: ST;

    private reducerMethods: {
        [key: string]: (state: ST, payload: any) => ST;
    } = {};

    constructor(store: IStore, defaultState?: ST) {
        this.store = store;
        this.defaultState = defaultState || Map({}) as any; // todo: this might be bad :/
    }

    public register(key: string | symbol, fn: (state: ST, payload: any) => ST) {
        this.reducerMethods[key] = fn;
    }

    public reduce(previousState: ST, action: Action) {
        const nextState: ST = previousState || this.defaultState;
        if (!this.reducerMethods.hasOwnProperty(action.type)) {
            return nextState;
        } else {
            return this.reducerMethods[action.type](nextState, action.payload);
        }
    }
}
