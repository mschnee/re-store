import { Map as ImmutableMap } from 'immutable';

import { Action, MapState, IStore, IReducer } from '@re-store/types';

export class Reducer<StateType, ST = MapState<StateType>> implements IReducer<StateType, ST> {
    public store: IStore;
    public defaultState: ST;

    private reducerMethods: Map<string | symbol, (state: ST, payload: any) => ST>;

    constructor(store: IStore, defaultState?: ST) {
        this.store = store;
        this.defaultState = defaultState || ImmutableMap({}) as any; // todo: this might be bad :/
        this.reducerMethods = new Map();
    }

    public register(key: string | symbol, fn: (state: ST, payload: any) => ST) {
        debugger;
        this.reducerMethods.set(key, fn);
    }

    public reduce(previousState: ST, action: Action) {
        const nextState: ST = previousState || this.defaultState;
        if (!this.reducerMethods.has(action.type)) {
            return nextState;
        } else {
            return this.reducerMethods.get(action.type)(nextState, action.payload);
        }
    }
}
